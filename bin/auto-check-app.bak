DIR="$ADEM_HOME"
USER=`whoami`
i=1

SITE_FILE=$1
if [ "$SITE_FILE" == "" ]; then
  {
  echo "Oh,no grid sites file to check the deployed application .Please input the grid sites file as the parameter.You can use auto-get-sites to create the available grid sites automatically."
  }
  exit
fi

for SITE in $(awk '{print $1}' $SITE_FILE)
do
  echo $i
  echo $SITE
  APP=`sed -n "$i"p $SITE_FILE | awk {'print $2'}`
  PACMAN=`sed -n "$i"p $SITE_FILE | awk {'print $3'}`

  #To make a directory as a new pacman work directory/
  #globus-job-run $SITE /bin/mkdir $APP/$USER 2>/dev/null
  #globus-job-run $SITE /bin/mkdir $APP/$USER/work-pac 2>/dev/null
  
  if [ -f $DIR/tmp/pac-deploy-$SITE-out.log ]; then
   {
   #make a timestamp for the deployment log
   #echo "It is NOT the first time to query."
   echo "`date`" >>$DIR/tmp/pac-deploy-$SITE-out.log
   echo "`date`" >>$DIR/tmp/pac-deploy-$SITE-err.log
   globus-job-run  $SITE  /bin/sh $APP/$USER/pac-$SITE.sh 1>>$DIR/tmp/pac-deploy-$SITE-out.log 2>>$DIR/tmp/pac-deploy-$SITE-err.log &
   }
  else
  {
  #echo "It is a new query!"
  # To create the pacman check script
  echo "#/bin/sh" >> $DIR/tmp/pac-$SITE.sh
  echo "cd  $APP/$USER/work-pac"  >> $DIR/tmp/pac-$SITE.sh
  echo "source $PACMAN/setup.sh"  >> $DIR/tmp/pac-$SITE.sh
  echo "$PACMAN/bin/pacman -clear-lock" >> $DIR/tmp/pac-$SITE.sh
  echo "$PACMAN/bin/pacman -l" >> $DIR/tmp/pac-$SITE.sh

  # create the log file
  echo "On $SITE,The deployment directory is: $APP/$USER/work-pac" >>$DIR/tmp/pac-deploy-$SITE-out.log
  #make a timestamp for the deployment log
  echo "`date`" >>$DIR/tmp/pac-deploy-$SITE-out.log
  echo "`date`" >>$DIR/tmp/pac-deploy-$SITE-err.log

  # To transmit and execute the pacman list script to the given grid site
  #globus-job-run  $SITE  -stage $DIR/tmp/pac-$SITE.sh
  globus-url-copy  file://$DIR/tmp/pac-$SITE.sh  gsiftp://$SITE$APP/$USER/pac-$SITE.sh
  globus-job-run  $SITE  /bin/sh $APP/$USER/pac-$SITE.sh 1>>$DIR/tmp/pac-deploy-$SITE-out.log 2>>$DIR/tmp/pac-deploy-$SITE-err.log &

  #to delete the tempory deploy file
  /bin/rm -f $DIR/tmp/pac-$SITE.sh
  }
  fi
  i=`expr $i + 1` 
done

echo "Please see the deployed applications in $DIR/tmp/pac-deploy-SITE-out.log, and any error messages in $DIR/tmp/pac-deploy-SITE-err.log"
echo "Pleas wait a minute. Now, it is creating the tc.data file..."
sleep 60

echo "#sitename	transformation	path	INSTALLED	platform	profiles" > $DIR/tmp/swift-tc.data
j=1
for SITE in $(awk '{print $1}' $SITE_FILE)
do
  echo "#"  >>  $DIR/tmp/swift-tc.data
  echo "#" "[$j]" "$SITE" >> $DIR/tmp/swift-tc.data
  echo "#"  >>  $DIR/tmp/swift-tc.data
  APP=`sed -n "$j"p $SITE_FILE | awk {'print $2'}`
  PACMAN=`sed -n "$j"p $SITE_FILE | awk {'print $3'}`

  afni=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep afni`
  if [ "$afni" != "" ] ; then
  {
   echo "$SITE	afni	$APP/$USER/work-pac/afni_src/?	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  angle=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep angle`
  if [ "$angle" != "" ] ; then
  {
   echo "$SITE	angle.sh	$APP/$USER/work-pac/angle/bin/angle.sh	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  R=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep R`
  if [ "X$R" != "X" ] ; then
  {
   echo "$SITE	R	$APP/$USER/work-pac/R-2.5.1/bin/R	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  dock=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep dock`
  if [ "$dock" != "" ] ; then
  {
   echo "$SITE	dock6	$APP/$USER/work-pac/dock6/bin/dock6	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  freesurfer=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep freesurfer`
  if [ "$freesurfer" != "" ] ; then
  {
   echo "$SITE	freesurfer	$APP/$USER/work-pac/freesurfer/bin/freesurfer	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  gaussian=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep gaussian`
  if [ "$gaussian" != "" ] ; then
  {
   echo "$SITE	g03	$APP/$USER/work-pac/gaussian/bin/g03	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  blast=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep blast-`
  if [ "X$blast" != "X" ] ; then
  {
   echo "$SITE	blastall	$APP/$USER/work-pac/blast-2.2.18/bin/blastall	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
   echo "$SITE	formatdb	$APP/$USER/work-pac/blast-2.2.18/bin/formatdb	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
   }
  fi

  mpiblast=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep mpiblast`
  if [ "$mpiblast" != "" ] ; then
  {
   echo "$SITE	mpiblast	$APP/$USER/work-pac/mpiblast-1.5.0-pio/bin/mpiblast	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
   }
  fi

  nab=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep nab`
  if [ "$nab" != "" ] ; then
  {
  echo "$SITE	nab	$APP/$USER/work-pac/nab-5.1.2/bin/nab	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  octave=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep octave`
  if [ "$octave" != "" ] ; then
  {
   echo "$SITE	octave	$APP/$USER/work-pac/octave-3.0.1/bin/octave	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
   }
  fi

  oops=`/bin/cat $DIR/tmp/pac-deploy-$SITE-out.log |grep \* |grep OOPS`
  if [ "$oops" != "" ] ; then
  {
   echo "$SITE	oops	$APP/$USER/work-pac/clOOPS-0.9.6-BETA1-src/bin/oops	INSTALLED	INTEL32::LINUX	null" >> $DIR/tmp/swift-tc.data
  }
  fi

  j=`expr $j + 1`
done
echo "The tc.data file is $DIR/tmp/swift-tc.data"
