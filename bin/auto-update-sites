#/bin/bash!
#(1) update the grid sites cache file if the information is changed
#(2) update the grid sites cache file if there is new available grid site or failed grid site, on the basis of authentication tests
DIR="$ADEM_HOME"
USER=`whoami`
CDATE=`date +%F-%R`

GRID=$1
VO=$2
SFILE=$3
NFILE=$4
 
if [ "X$GRID" == "X" ] || [ "X$VO" == "X" ] || [ "XSFILE" == "X" ]; then
  echo "(1-Grid)Please input the GRID name as the first parameter, which can be:"
  echo "osg osg-itb "
  echo "(2-VO)Please input the virtual organization name as the second parameter.Just use a space to separate the two parameters. For osg, vo can be:"
  echo "CDF CMS CompBioGrid DES DOSAR DZero Engage Fermilab fMRI GADU geant4 GLOW GPN GRASE GridChem GridEx GROW i2u2 iVDGL LIGO mariachi MIS  nanoHUB NWICG  Ops  OSG OSGEDU SDSS STAR USATLAS"
  echo "(3-Sites) And please input the available grid sites file as the third parameter.Just use a space to separate the parameters. You can use auto-get-sites to get the available grid sites automatically."
  echo "(4-Possible Sites)This is optional. Please input the possible avaialable grid sites file with successful authentication, but not in the available grid sites file yet. You can also use auto-get-sites to get the possible available grid sites automatically."
  exit
fi


for SITE in $(awk '{print $1}' $SFILE)
do
 {
  #get the basic information from VORS
  ID=`/bin/grep $SITE $DIR/logs/sites/.osg-sitelist.txt |awk -F, '{print $1}'`
  if [ "X$ID" != "X" ]; then
  /usr/bin/wget -O $DIR/logs/sites/$ID-site.txt "http://vors.grid.iu.edu/cgi-bin/tindex.cgi?grid=$GRID&VO=$VO&dtype=0&res=$ID" 1>/dev/null 2>/dev/null
  fi

  APP=`/bin/grep app_loc $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  DATA=`/bin/grep data_loc $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  LRM=`/bin/grep exec_jm $DIR/logs/sites/$ID-site.txt |awk -F/  '{print $2}' |cut -d- -f2`
  NAME=`/bin/grep shortname $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  GLOBUS=`/bin/grep globus_loc $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
 
#Two special sites
  if [ "$SITE" == "abitibi.sbgrid.org" ]; then
     APP="/opt/osg-shared/se/app/vo"
     DATA="/opt/osg-shared/se/data/vo"
  fi
  
  if [ "$SITE" == "lepton.rcac.purdue.edu" ]; then
     APP="/apps"
     DATA="/scratch"
  fi 

 ### This site is already in the grid sites cache file
  #Re-get $Pacman
  Flag="False" 
  PacB=`globus-job-run $SITE  /usr/bin/which pacman 2>/dev/null` && Flag="OK"
  if [ "X$PacB" != "X" ];then
  {
  binPac=`dirname $PacB`
  Pacman=`dirname $binPac`
  }
    else if [ $Flag == "OK" ]; then
    {
     Pacman=$APP/$VO/$USER/pacman-3.21
     }
      else
     Pacman="Error"
    fi
  fi
  
  MPIP=`/bin/grep $SITE $DIR/bin/.osg-sites.cache |awk '{print $8}'`
  
  Signature=`/bin/grep $SITE $DIR/bin/.osg-sites.cache |awk '{print $4}'`
  
  if [ "X$APP" == "X" ] || [ "X$DATA" == "X" ] || [ "X$LRM" == "X" ] || [ "X$NAME" == "X" ] || [ "X$MPIP"  == "X" ] || [ "X$Signature"  == "X" ] || [ "$Pacman" == "Error" ]; then
    /bin/echo "$SITE failed for required property information" >> $DIR/logs/sites/failed-sites-$CDATE.log
  else 
    /bin/echo "$SITE  $APP  $Pacman  $Signature  $DATA  $LRM  $NAME  $MPIP" >> $DIR/tmp/.osg-sites-new-$CDATE.cache
  fi
 }
done 

for NSITE in $(cat $NFILE)
do
 ### It's a new possible available grid site with succssful authentication
 {
  #get the basic information from VORS
  ID=`/bin/grep $NSITE $DIR/logs/sites/.osg-sitelist.txt |awk -F, '{print $1}'`
  if [ "X$ID" != "X" ]; then
  /usr/bin/wget -O $DIR/logs/sites/$ID-site.txt "http://vors.grid.iu.edu/cgi-bin/tindex.cgi?grid=$GRID&VO=$VO&dtype=0&res=$ID" 1>/dev/null 2>/dev/null
  fi

  APP=`/bin/grep app_loc $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  DATA=`/bin/grep data_loc $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  LRM=`/bin/grep exec_jm $DIR/logs/sites/$ID-site.txt |awk -F/  '{print $2}' |cut -d- -f2`
  NAME=`/bin/grep shortname $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  GLOBUS=`/bin/grep globus_loc $DIR/logs/sites/$ID-site.txt |awk -F= '{print $2}'`
  
  # mkdir for application deployment and execution
  DIRFlag=""
  globus-job-run $NSITE /bin/mkdir -p $APP/$VO/$USER/work-pac 2>/dev/null && globus-job-run $NSITE /bin/mkdir -p $DATA/$VO/$USER 2>/dev/null && DIRFlag="OK" || DIRFlag="Failed"  
  if [ "$DIRFlag" == "OK" ]; then
  {
  #check GridFTP, if PASS then continue, otherwise the next one
  globus-url-copy gsiftp://$NSITE$GLOBUS/libexec/globus-sh-tools-vars.sh file:///tmp/$NSITE-XXXXXX 2>/dev/null && GFtpS="success" || GFtpS="failed" &
  sleep 45
  pid=`/bin/ps -U $USER |grep globus-url-copy |awk '{print $1}'`
  /bin/kill -9 $pid 2>/dev/null

  if [ $GFtpS == "success" ]; then
  {
  #get $Pacman, deploy it if there is no available pacman
  PacB=`globus-job-run $NSITE  /usr/bin/which pacman 2>/dev/null`
  if [ "X$PacB" != "X" ];then
  {
  binPac=`dirname $PacB`
  Pacman=`dirname $binPac`
  }
  else
   {
   Pacman=$APP/$VO/$USER/pacman-3.21
   $DIR/bin/prepare-pacman-inst $VO $NSITE $APP &
    }
  fi

  #get $MPI, deploy it if there is no available MPI
  MPIB=`globus-job-run $NSITE  /usr/bin/which mpirun 2>/dev/null`
  if [ "X$MPIB" != "X" ];then
   {
   binP=`dirname $MPIB`
   MPIP=`dirname $binP`
     if [ "$MPIP" == "/usr" ];then
         MPI="DefaultMPI"
     else
         MPI=`basename $MPIP`
     fi
   }
  else
   {
   MPI="mpich-1.2.7"
   MPIP=$APP/$VO/$USER/mpich-1.2.7
   }
  fi

  #get the sites signatures
  globus-url-copy file://$DIR/bin/prepare-getsignature gsiftp://$NSITE$APP/$VO/$USER/prepare-getsignature 2>/dev/null && globus-job-run $NSITE  /bin/chmod +x  $APP/$VO/$USER/prepare-getsignature 
  Sig=`globus-job-run $NSITE  $APP/$VO/$USER/prepare-getsignature 2>/dev/null` && Signature="$Sig-$MPI" 

  if  [ "X$Signature"  == "X" ] || [ "X$APP" == "X" ] || [ "X$DATA" == "X" ] || [ "X$LRM" == "X" ] || [ "X$NAME" == "X" ]; then
    /bin/echo "New possible available site: $NSITE failed for required property information" >> $DIR/logs/sites/failed-sites-$CDATE.log
   else
    /bin/echo "$NSITE  $APP  $Pacman  $Signature  $DATA  $LRM  $NAME  $MPIP" >> $DIR/tmp/$GRID-$VO-new-avail-sites-$CDATE.txt
  fi
 
  }
  else
   {
    /bin/echo "New possible available site: $NSITE failed for GridFTP" >> $DIR/logs/sites/failed-sites-$CDATE.log
    }
  fi
 #Grid Ftp success or Not
 }
 else
 {
 /bin/echo "New possible available site: $NSITE failed for mkdir" >> $DIR/logs/sites/failed-sites-$CDATE.log
 }
 fi
 #Only get it if mkdir is a success 
}
done

NewFile=$DIR/tmp/$GRID-$VO-new-avail-sites-$CDATE.txt
if [ -f $NewFile ]; then
 {
# Deploy it if there is no available MPI
 /bin/grep "$USER\/mpich-1.2.7" $NewFile >> $DIR/tmp/$GRID-$VO-mpi-sites-$CDATE.txt
 mpis=`/bin/cat $DIR/tmp/$GRID-$VO-mpi-sites-$CDATE.txt |wc -l`
 if [ $mpis -gt 0 ]; then
 $DIR/bin/auto-deploy-app mpich-1.2.7  $VO  $DIR/tmp/$GRID-$VO-mpi-sites-$CDATE.txt 1>/dev/null 2>/dev/null & 
 fi

#If there are some new grid sites, add the new sites information to the .osg-sites.cache, also add the new sites information to the .swift-sites.xml cache file
  /bin/cat $NewFile >> $DIR/tmp/.osg-sites-new-$CDATE.cache 2>/dev/null
  
  SitesXML="$DIR/bin/.swift-sites.xml"
  /bin/cp $SitesXML  $DIR/bin/.swift-sites.xml-$CDATE.bak
  i=0
  for MSITE in $(awk '{print $1}' $NewFile)
  do
  {
  Nxml=`/bin/grep $MSITE $SitesXML 2>/dev/null`
   if [ "X$Nxml" == "X" ]; then

  NAME=`sed -n "$i"p $NewFile | awk '{print $7}'`
  LRM=`sed -n "$i"p $NewFile |awk '{print $6}'`
  DATA=`sed -n "$i"p $NewFile |awk '{print $5}'`
  SitesXML="$DIR/bin/.swift-sites.xml"
  Line1="<pool handle=\"$NAME\" sysinfo=\"INTEL32::LINUX\">"
  Line2="<gridftp  url=\"gsiftp://$MSITE\" storage=\"$DATA/\$VO/\$USER\" major=\"2\" minor=\"2\" patch=\"4\">"
  Line3="</gridftp>"
  Line4="<jobmanager universe=\"vanilla\" url=\"$MSITE/jobmanager-$LRM\" major=\"2\" minor=\"2\" patch=\"4\" />"
  Line5="<workdirectory >$DATA/\$VO/\$USER</workdirectory>"
  Line6="</pool>"
  sed -i "s,</config>,$Line1,g" $SitesXML
  /bin/echo $Line2 >> $SitesXML
  /bin/echo $Line3 >> $SitesXML
  /bin/echo $Line4 >> $SitesXML
  /bin/echo $Line5 >> $SitesXML
  /bin/echo $Line6 >> $SitesXML
  /bin/echo ""     >> $SitesXML
  /bin/echo "</config>" >> $SitesXML
   fi
  i=`expr $i + 1`
  }
  done

  }
fi

#If there is something changed for the current grid sites, update the grid sites cache file
/usr/bin/head -1 $DIR/bin/.osg-sites.cache > $DIR/tmp/.osg-sites-new-sorted.cache
sort $DIR/tmp/.osg-sites-new-$CDATE.cache >> $DIR/tmp/.osg-sites-new-sorted.cache
CFLAG=`cmp  $DIR/tmp/.osg-sites-new-sorted.cache $DIR/bin/.osg-sites.cache`
  if [ "X$CFLAG" != "X" ]; then
    {
     mv $DIR/bin/.osg-sites.cache  $DIR/bin/.osg-sites-$CDATE.cache.bak
     mv $DIR/tmp/.osg-sites-new-sorted.cache  $DIR/bin/.osg-sites.cache
    }
  fi
##update  .swift-sites.xml, if ( $NAME, $LRM, $DATA are changed) 

#To recored the command into the commands log file
echo "$CDATE auto-update-sites $GRID $VO $SFILE" >> $DIR/logs/commands
