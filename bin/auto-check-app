#/bin/bash!
# To check on the given grid sites for the given or ALL application software or given application software deployed by the users themselves 
#    

DIR="$ADEM_HOME"
USER=`whoami`
CDATE=`date +%F-%R`
i=1

VO=$1
SITE_FILE=$2
Application=$3

if [ "X$VO" == "X" ] || [ "$SITE_FILE" == "" ]; then
  echo "(1-VO)Please input the Virtual Organization name which you belong to,as the first parameter.For osg, vo can be: "
  echo "CDF CMS CompBioGrid DES DOSAR DZero Engage Fermilab fMRI GADU geant4 GLOW GPN GRASE GridChem GridEx GROW i2u2 iVDGL LIGO mariachi MIS  nanoHUB NWICG  Ops  OSG OSGEDU SDSS STAR USATLAS."
  echo "(2-Sites)Please input the grid sites file as the second parameter.Just use a space to separate the two parameters.You can use auto-get-sites to create the available grid sites file automatically."
  echo "(3-Application)Please input the application name as the third parameter. So, you can check just one application. Otherwise, it will check all of the applications. This is optional."
  echo "It's checking the available applications in the repository..."
  #get the packaged application software from the Pacman cache
  pacman -trust-all-caches -lc $REPOSITORY_HOME > $DIR/logs/deployment/package-list-$CDATE.log && PackagedSoftware=`sed -n '1!p' $DIR/logs/deployment/package-list-$CDATE.log |cut -c9- |cut -d- -f1,2 |sort -u`
  echo "The packaged application software names include:"
  echo "$PackagedSoftware"
  /bin/rm -rf o..pacman..o 2>/dev/null
  /bin/rm trusted.caches 2>/dev/null
  exit
fi

for SITE in $(awk '{print $1}' $SITE_FILE)
do
  echo $i
  echo $SITE
  APP=`sed -n "$i"p $SITE_FILE | awk {'print $2'}`
  PACMAN=`sed -n "$i"p $SITE_FILE | awk {'print $3'}`
  history=`ls $DIR/logs/deployment/pac-deploy-$SITE-*.log 2>/dev/null |wc -l`

  if [ $history -gt 0 ]; then
   {
   #make a timestamp for the log
   #echo "It is NOT the first time to query."
   echo "`date`" >$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log
   echo "`date`" >$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-err.log
   globus-job-run  $SITE  /bin/sh $APP/$VO/$USER/pac-$SITE.sh 1>>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log 2>>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-err.log && echo "Check Ending `date`" >>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log || echo "Check Failed `date`" >>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log &
   }
  else
  {
  #echo "It is a new query!"
  # To create the pacman check script
  echo "#/bin/sh" > $DIR/tmp/pac-$SITE.sh
  echo "cd  $APP/$VO/$USER/work-pac"  >> $DIR/tmp/pac-$SITE.sh
  echo "source $PACMAN/setup.sh"  >> $DIR/tmp/pac-$SITE.sh
  echo "$PACMAN/bin/pacman -clear-lock" >> $DIR/tmp/pac-$SITE.sh
  echo "$PACMAN/bin/pacman -l" >> $DIR/tmp/pac-$SITE.sh

  # create the log file
  echo "On $SITE,The deployment directory is: $APP/$VO/$USER/work-pac" >$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log
  #make a timestamp for the log
  echo "`date`" >>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log
  echo "`date`" >$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-err.log

  # To transmit and execute the pacman list script to the given grid site
  #globus-job-run  $SITE  -stage $DIR/tmp/pac-$SITE.sh
  globus-url-copy  file://$DIR/tmp/pac-$SITE.sh  gsiftp://$SITE$APP/$VO/$USER/pac-$SITE.sh 2>>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-err.log && globus-job-run  $SITE  /bin/sh $APP/$VO/$USER/pac-$SITE.sh 1>>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log 2>>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-err.log  && echo "Check Ending `date`" >>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log || echo "Check Failed `date`" >>$DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log &

  #to delete the tempory check file
  #/bin/rm -f $DIR/tmp/pac-$SITE.sh
  }
  fi
  i=`expr $i + 1` 
done

sleep 60

#To check the given application
if [ "X$Application" != "X" ]; then
   echo "#$Application deployment successful results" > $DIR/logs/deployment/$Application-deploy-$CDATE-suc-results.log
   echo "#$Application deployment failed results" > $DIR/logs/deployment/$Application-deploy-$CDATE-failed-results.log
   k=1
   for kSITE in $(awk '{print $1}' $SITE_FILE)
   do
     Name=`sed -n "$k"p $SITE_FILE | awk {'print $7'}`
     SucA=`/bin/cat $DIR/logs/deployment/pac-deploy-$kSITE-$CDATE-out.log |grep \* |grep $Application`
     if [ "X$SucA" != "X" ]; then
        {
        echo "#"  >>  $DIR/logs/deployment/$Application-deploy-$CDATE-suc-results.log
        echo "#" "[$k]" "$Name" >> $DIR/logs/deployment/$Application-deploy-$CDATE-suc-results.log
        echo "#" "$kSITE" >> $DIR/logs/deployment/$Application-deploy-$CDATE-suc-results.log
        echo $SucA >> $DIR/logs/deployment/$Application-deploy-$CDATE-suc-results.log
       
        NewA=`/bin/grep $kSITE $DIR/logs/applications/$Application-deploy-succ-all-results.log 2>/dev/null`
        if [ "X$NewA" == "X" ]; then
           {
           echo "#"  >> $DIR/logs/applications/$Application-deploy-succ-all-results.log
           echo "#" "[$k]" "$Name" >> $DIR/logs/applications/$Application-deploy-succ-all-results.log
           echo "#" "$kSITE" >> $DIR/logs/applications/$Application-deploy-succ-all-results.log
           echo "#" "$CDATE" >> $DIR/logs/applications/$Application-deploy-succ-all-results.log
           echo $SucA >> $DIR/logs/applications/$Application-deploy-succ-all-results.log
           }
        fi
        }
     fi

     FailA=`/bin/cat $DIR/logs/deployment/pac-deploy-$kSITE-$CDATE-out.log |grep \X |grep $Application`
     if [ "X$FailA" != "X" ]; then
        {
        echo "#"  >>  $DIR/logs/deployment/$Application-deploy-$CDATE-failed-results.log
        echo "#" "[$k]" "$Name" >> $DIR/logs/deployment/$Application-deploy-$CDATE-failed-results.log
        echo "#" "$kSITE" >> $DIR/logs/deployment/$Application-deploy-$CDATE-failed-results.log
        echo $FailA >> $DIR/logs/deployment/$Application-deploy-$CDATE-failed-results.log
        
        NewF=`/bin/grep $kSITE $DIR/logs/applications/$Application-deploy-fail-all-results.log 2>/dev/null`
        if [ "X$NewF" == "X" ]; then
           {
           echo "#"  >> $DIR/logs/applications/$Application-deploy-fail-all-results.log
           echo "#" "[$k]" "$Name" >> $DIR/logs/applications/$Application-deploy-fail-all-results.log
           echo "#" "$kSITE" >> $DIR/logs/applications/$Application-deploy-fail-all-results.log
           echo "#" "$CDATE" >> $DIR/logs/applications/$Application-deploy-fail-all-results.log
           echo $FailA >> $DIR/logs/applications/$Application-deploy-fail-all-results.log
           }
        fi
        }
     fi
      k=`expr $k + 1`
    done
echo "The application $Application deployment successful results on all of the available grid sites are in: $DIR/logs/deployment/$Application-deploy-$CDATE-suc-results.log"
echo "The application $Application deployment failed results on all of the available grid sites are in: $DIR/logs/deployment/$Application-deploy-$CDATE-failed-results.log"

else
#To merge the deployed application  software information on all of the available grid sites
    echo "#Successful deployment results" > $DIR/logs/deployment/All-app-deploy-$CDATE-suc-results.log
    echo "#Failed deployment results" > $DIR/logs/deployment/All-app-deploy-$CDATE-failed-results.log
j=1
for SITE in $(awk '{print $1}' $SITE_FILE)
do

  Name=`sed -n "$j"p $SITE_FILE | awk {'print $7'}`
  echo "#"  >>  $DIR/logs/deployment/All-app-deploy-$CDATE-suc-results.log
  echo "#" "[$j]" "$Name" >> $DIR/logs/deployment/All-app-deploy-$CDATE-suc-results.log
  echo "#" "$SITE" >> $DIR/logs/deployment/All-app-deploy-$CDATE-suc-results.log
  /bin/cat $DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log |grep \* >> $DIR/logs/deployment/All-app-deploy-$CDATE-suc-results.log

  echo "#"  >> $DIR/logs/deployment/All-app-deploy-$CDATE-failed-results.log
  echo "#" "[$j]" "$Name" >> $DIR/logs/deployment/All-app-deploy-$CDATE-failed-results.log
  echo "#" "$SITE" >> $DIR/logs/deployment/All-app-deploy-$CDATE-failed-results.log
  /bin/cat $DIR/logs/deployment/pac-deploy-$SITE-$CDATE-out.log |grep \X >> $DIR/logs/deployment/All-app-deploy-$CDATE-failed-results.log

  j=`expr $j + 1`
done
echo "The deployment successful results for all the applications on all of the available grid sites are in: $DIR/logs/deployment/All-app-deploy-$CDATE-suc-results.log"
echo "The failed results for all the applications on all of the available grid sites are in: $DIR/logs/deployment/All-app-deploy-$CDATE-failed-results.log"
fi

#To recored the command into the commands log file
echo "$CDATE auto-check-app $VO $SITE_FILE $Application" >> $DIR/logs/commands
